tosca_definitions_version: cloudify_dsl_1_3

#/proc/sys/net/ipv4/ip_forward

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml

dsl_definitions:
  os_config: &os_config
    username: dewayne@gigaspaces.com
    password: B0z0n0n0
    tenant_name: gigaspaces_dewayne
    auth_url: https://compute.datacentred.io:5000/

inputs:
  ssh_user:
    description: ssh user
    default: ubuntu
  ssh_keyfile:
    description: ssh key file name
    default: /home/ubuntu/dfilppi-dc.key


# Fanciful datatypes, given that TOSCA doesn't support collections
# of defined types
data_types:
  datatypes.FireWall_Rule:
    properties:
      interface:
        description: e.g. eth0, eth1, etc..
        type: string
        default: eth0
      direction:
        description: enum, either ingress or egress
        type: string
        default: ingress
      protocol:
        description: enum, tcp or udp
        type: string
        default: tcp
      allow:
        description: does rule allow or deny traffic
        type: boolean
        default: false
      ports:
        description: ports to block/allow (list of ints)
        default: []

  datatypes.Forwarding_Rule:
    properties:
      from_interface:
        type: string
      to_interface:
        type: string
      from_cidr:
        type: string
        default: ''

node_types:

  # IPTables implementation based on fabric
  cloudify.nodes.IPTables:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      ip:
        type: string
        description: host ip
      ssh_user:
        type: string
      key_filename:
        type: string
      firewall_rules: 
        description: list of datatypes.Firewall_Rule
        default: []
      forwarding_rules:
        description: list of datatypes.Forward_Rule
        default: []
    interfaces:
      cloudify.interfaces.lifecycle:
        start:           
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: iptables.py
            task_name: 
              default: start
            fabric_env:
              default:
                host_string: { get_property: [SELF ,ip] }
                user: { get_property: [ SELF, ssh_user ] }
                key_filename: { get_property: [ SELF, key_filename ] }
        stop:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: iptables.py
            task_name:
              default: stop
            fabric_env:
              default:
                host_string: { get_property: [SELF ,ip] }
                user: { get_property: [ SELF, ssh_user ] }
                key_filename: { get_property: [ SELF, key_filename ] }
  
node_templates:

  target_host:
    type: cloudify.nodes.Compute
    properties:
      agent_config:
        install_method: none
      ip: 10.0.1.96

  iptables:
    type: cloudify.nodes.IPTables
    properties:
      ip: { get_property: [ target_host, ip ] }
      ssh_user: { get_input: ssh_user }
      key_filename: { get_input: ssh_keyfile }
      firewall_rules:
        - interface: eth0
          direction: ingress
          protocol: tcp
          allow: false
          ports: [ 8000 ]
          
    relationships:
      - target: target_host
        type: cloudify.relationships.contained_in

